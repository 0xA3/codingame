package test;

import Std.parseInt;

using Lambda;
using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			it( "23200", {
				Main.process( "ABCD", "UVWX", ["23200"] ).should.be( "CCUVW" );
			});
			it( "Example line 1", {
				Main.process( "ABCD", "UVWX", ["0001111000"] ).should.be( "ABCABCAUBC" );
			});
			it( "Example", {
				final ip = example;
				Main.process( ip.pattern, ip.stock, ip.depthMaps ).should.be( exampleResult );
			});
			it( "Lattice", {
				final ip = lattice;
				Main.process( ip.pattern, ip.stock, ip.depthMaps ).should.be( latticeResult );
			});
			it( "Diamond", {
				final ip = diamond;
				Main.process( ip.pattern, ip.stock, ip.depthMaps ).should.be( diamondResult );
			});
			it( "ViewFullscreen", {
				final ip = viewFullscreen;
				Main.process( ip.pattern, ip.stock, ip.depthMaps ).should.be( viewFullscreenResult );
			});
		});
			
	}

	static function parseInput( input:String ) {
		final lines = input.replace( "\t", "" ).replace( "\r", "" ).split( "\n" );
		final p = parseInt( lines[0] );
		final pattern = lines[1];
		final s = parseInt( lines[2] );
		final stock = lines[3];
		final inputs = lines[4].split(' ');
		final h = parseInt( inputs[0]);
		final w = parseInt( inputs[1]);
		final depthMaps = [for( i in 5...lines.length ) lines[i]];
						
		return { pattern: pattern, stock: stock, depthMaps: depthMaps };
	}
	
	static function parseResult( input:String ) return input.replace( "\t", "" ).replace( "\r", "" );

	final example = parseInput(
		"4
		ABCD
		3
		UVW
		4 10
		0000000000
		0001111000
		0200000001
		1232000222"	);

	final exampleResult = parseResult(
		"ABCDABCDAB
		ABCABCAUBC
		ADUVADUVAU
		BDDUVWDWDW"	);

	final lattice = parseInput(
		"8
		|-+_!=\\/
		8
		-/|!+_\\=
		9 33
		000110001100011000110001100011000
		000110001100011000110001100011000
		111111111111111111111111111111111
		000110001100011000110001100011000
		000110001100011000110001100011000
		111111111111111111111111111111111
		000110001100011000110001100011000
		000110001100011000110001100011000
		111111111111111111111111111111111" );

	final latticeResult = parseResult(
		"|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		-+_!=\\/-+_!=\\/-+_!=\\/-+_!=\\/-+_!=
		|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		-+_!=\\/-+_!=\\/-+_!=\\/-+_!=\\/-+_!=
		|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		|-+!=-\\/-+/!=\\/|-+!=!\\/-++!=\\/_-+
		-+_!=\\/-+_!=\\/-+_!=\\/-+_!=\\/-+_!=" );

	 final diamond = parseInput(
		"10
		8 8    88 
		10
		 8 8  88 8
		21 40
		0000000000000000000000000000000000000000
		0000000000000000010000000000002220000000
		0000000000000000111000000000222222200000
		0000000000000001121100000002222222220000
		0000000000000011222110000002222222220000
		0000000000000112232211000000222222200000
		0000000000001122333221100000002220000000
		0000000000011223343322110000000000000000
		0000000000112233444332211000000000000000
		0000000001122334444433221100000000000000
		0000000011223344444443322110000000000000
		0000000001122334444433221100000000000000
		0000000000112233444332211000000000000000
		0000000000011223343322110000001110000000
		0000000000001122333221100000022222000000
		0000000000000112232211000000333333300000
		0000000000000011222110000004444444440000
		0000000000000001121100000000000000000000
		0000000000000000111000000000000000000000
		0000000000000000010000000000000000000000
		0000000000000000000000000000000000000000" );

	 final diamondResult = parseResult(
		"8 8    88 8 8    88 8 8    88 8 8    88 
		8 8    88 8 8    8  8 8    8  8  8   8  
		8 8    88 8 8   88  8 8   888 8   88 88 
		8 8    88 8 8   8  88 8   888 8   88 88 
		8 8    88 8 8   8 8  88   8  88   8  8 8
		8 8    88 8 8  888  88   88888   888 888
		8 8    88 8    8 8   8   8 8     8 8 8  
		8 8    88 88   8 8  8   88 8  8   88 8  
		8 8    88  8  88 8   88 88 8   88 88 8  
		8 8    888    88     888  8    888  8   
		8 8    8 88    88     888  8    888  8  
		8 8    888    88     888  8    888  8   
		8 8    88  8  88 8   88 88 8   88 88 8  
		8 8    88 88   8 8  8   88 8      88 8  
		8 8    88 8    8 8   8   8 8 8   88  8 8
		8 8    88 8 8  888  88   8888   8888  8 
		8 8    88 8 8   8 8  88   888   888  8  
		8 8    88 8 8   8  88 8   8  88 8   8  8
		8 8    88 8 8   88  8 8   88  8 8   88  
		8 8    88 8 8    8  8 8    8  8 8    8  
		8 8    88 8 8    88 8 8    88 8 8    88 " );

	final viewFullscreen = parseInput(
		"12
		`'\"'`*\"`\"`*\"
		13
		\"`*\".*\"\"\"'*'.
		18 53
		00000000000000000000000000000000000000000000000000000
		00000000000000011111111111110000000011111111111110000
		00000000000011111111111111110000011111111111111110000
		00000000001111111111111111110001111111111111111110000
		00000000011111111111111111110011111111111111111110000
		00000000111111100000001111110111111100000001111110000
		00000001111111000000000000001111111000000000000000000
		00000001111111000000000000001111111000000000000000000
		00000001111111000000000000001111111000011111111110000
		00000001111111000000000000001111111000011111111110000
		00000001111111000000000000001111111000011111111110000
		00000001111111000000000000001111111000000001111110000
		00000000111111100000001111110111111100000001111110000
		00000000011111111111111111110011111111111111111110000
		00000000001111111111111111110001111111111111111110000
		00000000000011111111111111110000011111111111111110000
		00000000000000011111111111110000000011111100011110000
		00000000000000000000000000000000000000000000000000000" );
		
	final viewFullscreenResult = parseResult(
		"`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`
		`'\"'`*\"`\"`*\"`'\"`*\"`\"`*\"`'\"`*\"\"`\"`*\"`\"`*\"\"`\"`*\"`\"``*\"\"
		`'\"'`*\"`\"`*\"'\"'`*\"`\"`*\"'\"'`*\"\"`\"`\"'\"'`*\"\"`\"`\"'\"'``*\"\"
		`'\"'`*\"`\"`\"`'\"'`*\"`\"`\"`'\"'`*\"\"``\"`'\"'`*\"\"``\"`'\"'``*\"\"
		`'\"'`*\"`\"*\"`'\"'`*\"`\"*\"`'\"'`*\"\"\"*\"`'\"'`*\"\"\"*\"`'\"'``*\"\"
		`'\"'`*\"``*\"`'\"'\"`*\"``*`'\"'\"``\"``*`'\"*'\"``\"`*`'\"*'\"\"``
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"'*\"\"`*\"``'\"\"'*
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"'*\"\"`*\"``'\"\"'*
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"*\"\"`*\"``'\"*\"*\"
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"*\"\"`*\"``'\"*\"*\"
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"*\"\"`*\"``'\"*\"*\"
		`'\"'`*\"\"`*\"`'\"\"'`*\"\"`*\"`'\"\"'*\"\"`*\"``'\"\"'*\"\"*\"``'\"*\"'*
		`'\"'`*\"``*\"`'\"'\"`*\"``*`'\"'\"``\"``*`'\"*'\"``\"`*`'\"*'\"\"``
		`'\"'`*\"`\"*\"`'\"'`*\"`\"*\"`'\"'`*\"\"\"*\"`'\"'`*\"\"\"*\"`'\"'``*\"\"
		`'\"'`*\"`\"`\"`'\"'`*\"`\"`\"`'\"'`*\"\"``\"`'\"'`*\"\"``\"`'\"'``*\"\"
		`'\"'`*\"`\"`*\"'\"'`*\"`\"`*\"'\"'`*\"\"`\"`\"'\"'`*\"\"`\"`\"'\"'``*\"\"
		`'\"'`*\"`\"`*\"`'\"`*\"`\"`*\"`'\"`*\"\"`\"`*\"`\"`*\"\"``\"`\"`\"`**\"\"
		`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`*\"`\"`*\"`'\"'`" );
		
}

