package test;

import Main;
import Std.parseInt;

using buddy.Should;
using StringTools;

@:access(Main)
class Tests extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			
			final _2bits = "00";
			it( "2 bits", {	Main.process( _2bits ).should.be( 1 ); });
			
			final _5bits = "01010";
			it( "5 bits", {	Main.process( _5bits ).should.be( 3 ); });
			
			final _11bits = "11011101111";
			it( "11 bits", { Main.process( _11bits ).should.be( 8 ); });
			
			final _50bits = "01110100110011000101001100011110010010101011111011";
			it( "50 bits", { Main.process( _50bits ).should.be( 8 ); });
			
			final _100bits = "1011010111110110111001001110111011000001011010110011101101111101111111011100011001101011011110001010";
			it( "100 bits", { Main.process( _100bits ).should.be( 13 ); });
			
			final _999bits
			it( "999 bits", { Main.process( _999bits ).should.be( 23 ); });
			
			final _32bits = "10000000011100000000011111000001";
			it( "32 bits", { Main.process( _32bits ).should.be( 6 ); });
			
			final _20bits = "00101001100011001111";
			it( "20 bits", { Main.process( _20bits ).should.be( 5 ); });
			
			final wholeString = "111111101111111";
			it( "Whole string", { Main.process( wholeString ).should.be( 15 ); });
			
			final allZeros = "00000000000000000000";
			it( "All zeros", { Main.process( allZeros ).should.be( 1 ); });
			
			final gaps = "1110011100111";
			it( "Gaps", { Main.process( gaps ).should.be( 4 ); });
			
			final random100 = "0010000011000101001110010011011001000111010010101111000011011110001000000000100010100011010100011101";
			it( "Random 100", {	Main.process( random100 ).should.be( 7 ); });

			final random32 = "00010111111001000101011111111010";
			it( "Random 32", { Main.process( random32 ).should.be( 10 ); });

			final gaps2 = "110110011100111";
			it( "Gaps 2", {	Main.process( gaps2 ).should.be( 5 ); });

			final steps = "101101110111101111101111110";
			it( "Steps", { Main.process( steps ).should.be( 12 ); });

			
		});

	}

}

