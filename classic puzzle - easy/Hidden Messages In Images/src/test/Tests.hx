package test;

import Main;
import Std.parseInt;

using buddy.Should;
using StringTools;
using Lambda;

@:access(Main)
class Tests extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			
			it( "Hello World!", {
				Main.process( helloWorld ).should.be( "Hello World!" );
			});
			
			it( "This is a lot of fun!", {
				Main.process( thisIsALotOfFun ).should.be( "This is a lot of fun!" );
			});
			
			it( "I learned something new with this puzzle", {
				Main.process( iLearnedSomethingNewWithThisPuzzle ).should.be( "I learned something new with this puzzle" );
			});
			
			it( "I will hide messages in all my photos", {
				Main.process( iWillHideMessagesInAllMyPhotos ).should.be( "I will hide messages in all my photos" );
			});
			
		});

	}

	static function parseInput( input:String ) {
		final lines = input.split( "\n" ).map( line -> line.split(" "));
		final w = parseInt( lines[0][0] );
		final h = parseInt( lines[0][1] );
		final pixels = [for( i in 0...h ) lines[i + 1].map( s -> parseInt( s ))].flatten();
		return pixels;
	}

	final helloWorld = parseInput(
	"8 12
	220 251 30 182 233 122 150 30
	132 101 135 212 246 201 128 203
	62 33 39 70 73 175 218 140
	44 165 9 140 83 67 34 100
	142 75 125 242 49 175 209 37
	252 26 123 6 186 72 230 94
	218 85 228 205 146 67 219 187
	194 159 81 190 51 235 41 121
	208 33 245 71 172 218 97 130
	122 31 135 198 135 249 174 28
	162 109 149 216 156 195 140 10
	100 252 1 164 150 22 144 109" );
	
	final thisIsALotOfFun = parseInput(
	"12 14
	80 37 246 73 244 119 132 80 238 53 19 126
	247 24 108 46 178 229 39 148 11 188 204 245
	2 229 103 71 80 74 159 215 192 22 213 116
	6 84 238 126 250 233 151 38 217 82 128 253
	190 67 155 249 18 14 155 115 246 72 193 136
	134 112 50 70 140 119 131 46 110 140 146 41
	228 176 97 90 164 232 216 174 38 59 83 8
	45 113 146 58 214 83 139 84 19 143 221 55
	186 171 131 99 94 143 32 118 24 96 13 188
	52 228 116 10 152 57 227 252 171 165 39 103
	2 83 137 212 172 113 219 42 234 220 9 198
	36 34 58 154 30 155 73 252 10 91 149 180
	8 199 219 193 216 23 232 169 140 127 3 18
	71 33 197 238 60 206 129 220 70 86 156 73" );

	final iLearnedSomethingNewWithThisPuzzle = parseInput(
	"16 20
	132 219 42 252 173 196 238 107 116 170 205 190 68 130 172 138
	78 3 245 212 177 43 176 70 126 79 187 64 20 161 70 227
	46 115 113 106 244 100 176 153 238 243 33 31 54 200 91 102
	176 247 83 186 155 139 15 220 46 37 247 102 210 139 84 189
	106 233 173 234 156 53 26 138 198 86 157 232 94 200 126 18
	250 139 17 15 56 70 89 103 208 171 239 216 143 69 111 159
	196 117 75 194 37 211 74 167 122 173 249 64 62 123 42 69
	20 233 103 103 134 49 48 56 82 245 241 58 177 82 22 56
	214 9 199 120 79 130 254 79 124 81 151 58 89 161 229 0
	108 123 151 6 230 83 205 237 110 146 233 46 22 142 142 104
	246 135 63 126 95 201 225 116 10 145 171 236 210 83 100 41
	166 183 167 211 198 221 41 19 182 36 23 86 142 238 38 94
	114 207 203 33 174 23 221 243 132 171 57 170 243 168 46 203
	158 35 199 101 106 127 190 52 206 47 233 214 157 2 100 44
	188 52 69 64 160 116 194 152 208 21 145 157 132 151 226 184
	104 255 89 168 243 72 100 124 78 17 145 48 43 174 172 177
	54 69 37 49 86 152 123 87 138 116 121 238 216 100 120 134
	126 43 225 37 204 30 34 154 16 51 227 85 162 17 96 19
	160 207 145 199 41 156 131 34 150 19 195 211 87 62 111 222
	42 21 219 82 143 87 56 244 208 181 55 214 188 75 228 217" );

	final iWillHideMessagesInAllMyPhotos = parseInput(
	"8 37
	172 141 12 134 51 28 6 65
	114 242 219 228 92 60 244 90
	168 129 1 73 166 69 39 189
	30 97 169 146 177 92 230 77
	144 207 173 8 97 21 184 74
	144 251 45 204 99 29 184 122
	54 178 203 198 236 240 12 148
	180 117 17 204 37 92 206 60
	186 251 67 138 17 200 210 55
	22 49 157 114 194 131 232 114
	78 151 157 192 240 83 128 171
	8 94 83 156 92 102 192 56
	208 169 105 114 155 61 164 167
	204 121 145 238 102 173 18 155
	200 161 155 255 14 50 53 77
	50 71 245 111 252 2 185 23
	230 139 207 48 74 50 186 191
	244 85 215 220 70 31 61 231
	82 113 249 250 152 227 170 115
	226 201 107 167 34 242 71 197
	114 88 179 220 246 82 196 160
	236 213 197 236 157 216 154 145
	36 107 55 212 89 131 163 16
	14 132 197 210 212 176 132 168
	42 47 89 216 80 22 10 49
	198 79 199 188 205 59 116 112
	78 213 209 104 137 5 64 34
	230 98 141 138 132 186 134 158
	224 97 143 242 53 7 76 211
	56 91 183 227 241 198 190 1
	46 60 107 104 114 44 152 40
	160 141 97 1 40 164 24 212
	88 87 29 104 179 206 218 234
	124 223 223 2 159 127 233 227
	136 243 87 209 76 9 48 208
	28 25 175 218 85 59 193 173
	166 197 5 173 224 234 121 105" );

}

