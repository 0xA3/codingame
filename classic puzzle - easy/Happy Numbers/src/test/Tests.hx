package test;

import Main;
import Std.parseInt;

using buddy.Should;
using StringTools;
using Lambda;

@:access(Main)
class Tests extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			
			it( "1", {
				Main.process( ["1"] ).should.be( "1 :)" );
			});
			
			it( "2", {
				Main.process( ["2"] ).should.be( "2 :(" );
			});
			
			it( "1121", {
				Main.process( ["1121"] ).should.be( "1121 :)" );
			});
			
			it( "Example", {
				Main.process( simple ).should.be( simpleResult );
			});
			
			it( "Moderate", {
				Main.process( moderate ).should.be( moderateResult );
			});
			
			it( "Serious", {
				Main.process( serious ).should.be( seriousResult );
			});
			
			it( "Watch out the limit", {
				Main.process( watchOutTheLimit ).should.be( watchOutTheLimitResult );
			});
			
			it( "Cocktail", {
				Main.process( cocktail ).should.be( cocktailResult );
			});
			
			it( "Validator 5", {
				Main.process( validator5 ).should.be( validator5Result );
			});
			
		});

	}

	static function parseInput( input:String ) {
		final inputLines = input.split( "\n" );
		final n = parseInt( inputLines[0] );
		final lines = [for( i in 0...n ) inputLines[i + 1].trim()];
		return lines;
	}

	static function parseResult( result:String ) {
		final lines = result.split( "\n" );
		return lines.map( line -> line.trim() ).join( "\n" );
	}

	final simple = parseInput(
	"2
	23
	24" );

	final simpleResult = parseResult(
	"23 :)
	24 :(" );

	final moderate = parseInput(
	"10
	707
	761
	6673
	1121
	2136
	8430
	8517
	17990
	44116
	29378" );

	final moderateResult = parseResult(
	"707 :(
	761 :)
	6673 :)
	1121 :)
	2136 :(
	8430 :(
	8517 :)
	17990 :(
	44116 :)
	29378 :(" );

	final serious = parseInput(
	"50
	28884069
	15255918
	793890065
	792142779
	261459860
	102194468
	689404468
	424636898
	3473612215
	8508737225
	9624733145
	5408096980
	9374416212
	7110522176
	16709665649
	89916858321
	85386779618
	61194262999
	30570163977
	328117912160
	476021531779
	522129642021
	555715256074
	376076639847
	424232326704
	3680723624740
	4829572012207
	7912847312948
	1958247411739
	4468024943629
	1896681012468
	8449858244539
	7453509141438
	726599288606651
	403059553008706
	963464505020791
	689157844164490
	741388486974838
	640939128580935
	922646128289853
	249308690059039
	681461258122668
	3620954018480818
	4911635098482485
	4082128031442855
	27710236654501553
	56367211052451312
	27692580770914876
	16525534153749833
	697719833245520439" );

	final seriousResult = parseResult(
	"28884069 :)
	15255918 :)
	793890065 :(
	792142779 :(
	261459860 :)
	102194468 :)
	689404468 :)
	424636898 :)
	3473612215 :(
	8508737225 :)
	9624733145 :(
	5408096980 :)
	9374416212 :(
	7110522176 :(
	16709665649 :)
	89916858321 :(
	85386779618 :)
	61194262999 :(
	30570163977 :(
	328117912160 :(
	476021531779 :)
	522129642021 :(
	555715256074 :)
	376076639847 :(
	424232326704 :)
	3680723624740 :(
	4829572012207 :)
	7912847312948 :(
	1958247411739 :)
	4468024943629 :)
	1896681012468 :)
	8449858244539 :(
	7453509141438 :(
	726599288606651 :(
	403059553008706 :(
	963464505020791 :)
	689157844164490 :(
	741388486974838 :(
	640939128580935 :)
	922646128289853 :(
	249308690059039 :)
	681461258122668 :)
	3620954018480818 :(
	4911635098482485 :(
	4082128031442855 :)
	27710236654501553 :(
	56367211052451312 :(
	27692580770914876 :)
	16525534153749833 :)
	697719833245520439 :(" );

	final watchOutTheLimit = parseInput(
	"30
	2712939616709395196
	8773540098233661513
	2404277834568699974
	8590412756910685593
	2701881001870295366
	7507778876190050823
	82754144591389495778
	56062096111521716941
	23309561455834016944
	73841907787177547505
	412089832041649792031
	573794892563725215304
	738562319252459387961
	929488123610466618818
	5192096589413817601914
	6540732750664388235819
	1673294713959721837544
	8996034026865469420948
	9613726251606272557499
	1814749635202801516423
	43920529769043088306276
	57689917213067644516676
	32661878984662075102682
	95945151456802793475006
	432579896155690172763949
	588057966438396711424634
	8094037048931853415852396
	7258445777006001314818367
	4282163185033880782108704
	7668897902037856608492414" );

	final watchOutTheLimitResult = parseResult(
	"2712939616709395196 :)
	8773540098233661513 :)
	2404277834568699974 :(
	8590412756910685593 :)
	2701881001870295366 :(
	7507778876190050823 :(
	82754144591389495778 :)
	56062096111521716941 :(
	23309561455834016944 :(
	73841907787177547505 :(
	412089832041649792031 :(
	573794892563725215304 :(
	738562319252459387961 :)
	929488123610466618818 :(
	5192096589413817601914 :)
	6540732750664388235819 :)
	1673294713959721837544 :(
	8996034026865469420948 :(
	9613726251606272557499 :(
	1814749635202801516423 :(
	43920529769043088306276 :)
	57689917213067644516676 :)
	32661878984662075102682 :)
	95945151456802793475006 :)
	432579896155690172763949 :(
	588057966438396711424634 :(
	8094037048931853415852396 :(
	7258445777006001314818367 :)
	4282163185033880782108704 :)
	7668897902037856608492414 :)" );

	final cocktail = parseInput(
	"56
	1
	6
	8
	13
	60
	913
	489
	9768
	3456
	9287
	45989
	496788
	29840025
	36563801
	685085588
	486573009
	288146548
	832141076
	6655289706
	9292642007
	3164543188
	7075686538
	41016860297
	31880667802
	207830543655
	317953679941
	595732132210
	3006022391976
	63971626265480
	62716820370707
	96942799282405
	28937757750062
	663584110970655
	102333477995527
	6431283691796496
	8124956605750856
	7967549675787318
	9244681613480703
	30264592938637733
	50581183697787625
	413400408055457847
	2243749826573112126
	5465065846022765077
	24941709773598622563
	46210575821034680320
	73492006573113257836
	679927533571841532898
	767927314181270261102
	618090695302486224418
	9212317667882582203478
	1488465104453261835504
	2135952998394028928579
	56619771113193694039313
	598694184459454744118777
	699532697493580193107478
	1646476620141690717724578" );

	final cocktailResult = parseResult(
	"1 :)
	6 :(
	8 :(
	13 :)
	60 :(
	913 :)
	489 :(
	9768 :)
	3456 :)
	9287 :(
	45989 :(
	496788 :)
	29840025 :(
	36563801 :(
	685085588 :)
	486573009 :)
	288146548 :(
	832141076 :(
	6655289706 :)
	9292642007 :(
	3164543188 :(
	7075686538 :(
	41016860297 :(
	31880667802 :(
	207830543655 :)
	317953679941 :(
	595732132210 :(
	3006022391976 :)
	63971626265480 :)
	62716820370707 :(
	96942799282405 :(
	28937757750062 :(
	663584110970655 :)
	102333477995527 :(
	6431283691796496 :)
	8124956605750856 :)
	7967549675787318 :)
	9244681613480703 :(
	30264592938637733 :)
	50581183697787625 :(
	413400408055457847 :)
	2243749826573112126 :(
	5465065846022765077 :(
	24941709773598622563 :(
	46210575821034680320 :(
	73492006573113257836 :(
	679927533571841532898 :(
	767927314181270261102 :(
	618090695302486224418 :(
	9212317667882582203478 :)
	1488465104453261835504 :)
	2135952998394028928579 :(
	56619771113193694039313 :)
	598694184459454744118777 :(
	699532697493580193107478 :(
	1646476620141690717724578 :)" );

	final validator5 = parseInput(
	"50
	7
	8
	86
	10
	32
	10
	310
	913
	108
	3925
	57714
	204650
	3935999
	8869716
	5310265
	1305462
	81915006
	62187788
	37434030
	82893156
	357558526
	389679728
	429968695
	4614121900
	3273949923
	3402040497
	8390063700
	75860300187
	3830929637583
	7456574720517
	76083067902031
	43231406433477
	84658586744469
	566855069295730
	293024126836742
	6987862321189978
	2481331054005573
	8550506486727537
	52611351637349120
	633736527285728075
	4280271021537705216
	7923785328480252021
	74692295997080392994
	342639328902349085500
	3635171293808307965209
	4610726264688936129498
	2411843019493615815308
	89073551194714198974652
	3547617484839572359410360
	7547346898512036957709921" );

	final validator5Result = parseResult(
	"7 :)
	8 :(
	86 :)
	10 :)
	32 :)
	10 :)
	310 :)
	913 :)
	108 :(
	3925 :(
	57714 :(
	204650 :(
	3935999 :)
	8869716 :)
	5310265 :)
	1305462 :)
	81915006 :)
	62187788 :)
	37434030 :(
	82893156 :(
	357558526 :)
	389679728 :(
	429968695 :(
	4614121900 :(
	3273949923 :(
	3402040497 :(
	8390063700 :(
	75860300187 :(
	3830929637583 :)
	7456574720517 :(
	76083067902031 :)
	43231406433477 :)
	84658586744469 :(
	566855069295730 :)
	293024126836742 :(
	6987862321189978 :(
	2481331054005573 :(
	8550506486727537 :(
	52611351637349120 :(
	633736527285728075 :(
	4280271021537705216 :(
	7923785328480252021 :(
	74692295997080392994 :(
	342639328902349085500 :(
	3635171293808307965209 :)
	4610726264688936129498 :(
	2411843019493615815308 :(
	89073551194714198974652 :(
	3547617484839572359410360 :(
	7547346898512036957709921 :(" );
}

