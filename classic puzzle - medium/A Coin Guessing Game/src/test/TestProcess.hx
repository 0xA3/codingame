package test;

import Std.parseInt;

using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite {
	
	public function new() {

		describe( "Test process", {
			
			it( "2 coins", {
				final ip = coins2;
				Main.process( ip.coins, ip.throws ).should.be( coins2Result );
			});
			
			it( "3 coins", {
				final ip = coins3;
				Main.process( ip.coins, ip.throws ).should.be( coins3Result );
			});
			
			it( "4 coins", {
				final ip = coins4;
				Main.process( ip.coins, ip.throws ).should.be( coins4Result );
			});
			
			it( "4 coins 1", {
				final ip = coins41;
				Main.process( ip.coins, ip.throws ).should.be( coins41Result );
			});
			
			it( "4 coins 2", {
				final ip = coins42;
				Main.process( ip.coins, ip.throws ).should.be( coins42Result );
			});
			
			it( "4 coins 3", {
				final ip = coins43;
				Main.process( ip.coins, ip.throws ).should.be( coins43Result );
			});
			
			it( "4 coins 4", {
				final ip = coins44;
				Main.process( ip.coins, ip.throws ).should.be( coins44Result );
			});
			
			it( "5 coins", {
				final ip = coins5;
				Main.process( ip.coins, ip.throws ).should.be( coins5Result );
			});
			
			it( "10 coins", {
				final ip = coins10;
				Main.process( ip.coins, ip.throws ).should.be( coins10Result );
			});
			
			@include it( "10 coins 1", {
				final ip = coins101;
				Main.process( ip.coins, ip.throws ).should.be( coins101Result );
			});
			
			it( "10 coins 2", {
				final ip = coins102;
				Main.process( ip.coins, ip.throws ).should.be( coins102Result );
			});
			
			it( "10 coins 3", {
				final ip = coins103;
				Main.process( ip.coins, ip.throws ).should.be( coins103Result );
			});
			
			it( "10 coins 4", {
				final ip = coins104;
				Main.process( ip.coins, ip.throws ).should.be( coins104Result );
			});
			
			it( "25 coins", {
				final ip = coins25;
				Main.process( ip.coins, ip.throws ).should.be( coins25Result );
			});
			
			it( "50 coins", {
				final ip = coins50;
				Main.process( ip.coins, ip.throws ).should.be( coins50Result );
			});
			
			it( "100 coins", {
				final ip = coins100;
				Main.process( ip.coins, ip.throws ).should.be( coins100Result );
			});
			
			it( "150 coins", {
				final ip = coins150;
				Main.process( ip.coins, ip.throws ).should.be( coins150Result );
			});
		});
	}

	static function parseInput( input:String ) {
		final lines = input.replace( "\t", "" ).replace( "\r", "" ).split( "\n" );
		final inputs = lines[0].split(' ');
		final coins = parseInt( inputs[0] );
		final throwsNum = parseInt( inputs[1] );
		
		final throws = [for( i in 0...throwsNum ) lines[i + 1].split(' ').map( s -> parseInt( s ))];
			
		return { coins: coins, throws: throws };
	}
	
	final coins2 = parseInput(
		"2 3
		4 2
		2 4
		4 3" );
	
	final coins2Result = "4 2";
	
	final coins3 = parseInput(
		"3 2
		3 1 6
		4 1 6" );
	
	final coins3Result = "2 4 6";
	
	final coins4 = parseInput(
		"4 3
		4 1 8 6
		5 6 8 1
		6 3 1 4" );
	
	final coins4Result = "2 8 4 6";
	
	final coins41 = parseInput(
		"4 3
		2 1 7 3
		5 6 8 3
		4 8 1 5" );
	
	final coins41Result = "6 4 2 8";
	
	final coins42 = parseInput(
		"4 5
		1 5 3 4
		2 7 6 8
		3 4 2 1
		6 8 7 2
		4 5 3 8" );
	
	final coins42Result = "8 6 2 4";
	
	final coins43 = parseInput(
		"4 2
		5 1 6 8
		3 4 1 6" );
	
	final coins43Result = "2 8 4 6";
	
	final coins44 = parseInput(
		"4 10
		5 3 8 1
		4 8 1 2
		4 2 8 1
		6 2 4 8
		2 6 4 8
		3 8 1 5
		3 5 8 1
		7 5 3 1
		1 5 3 7
		5 7 6 4" );
	
	final coins44Result = "6 4 2 8";
	
	final coins5 = parseInput(
		"5 4
		2 10 6 3 5
		5 1 9 3 2
		9 8 10 4 7
		4 1 9 5 2" );
	
	final coins5Result = "10 4 8 2 6";
	
	final coins10 = parseInput(
		"10 9
		14 1 15 13 2 7 16 19 11 4
		11 13 12 16 18 2 4 8 6 14
		1 2 19 10 20 12 14 4 16 15
		18 3 14 17 11 2 7 15 19 20
		18 10 6 2 14 15 4 13 12 16
		10 9 18 15 4 12 5 3 19 13
		1 11 20 7 2 14 19 4 16 15
		11 19 17 15 7 2 13 3 14 1
		14 10 13 17 6 9 1 7 3 8" );
	
	final coins10Result = "18 16 14 12 2 10 20 8 4 6";
	
	final coins101 = parseInput(
		"10 6
		18 14 19 1 11 9 17 13 5 3
		3 18 12 11 6 7 19 10 16 1
		5 2 8 13 18 9 20 7 3 6
		7 3 6 20 5 18 19 9 12 2
		14 17 19 18 11 1 3 16 5 13
		8 7 1 5 4 12 6 16 20 18" );
	
	final coins101Result = "2 4 10 14 16 20 12 18 6 8";
	
	final coins102 = parseInput(
		"10 6
		13 6 20 9 1 5 11 12 7 3
		1 15 10 3 18 20 12 13 7 4
		6 7 8 5 9 11 1 12 14 20
		4 17 1 6 18 8 16 10 12 14
		13 15 12 7 4 2 18 20 3 9
		8 15 3 12 11 17 2 7 9 18" );
	
	final coins102Result = "2 14 18 16 10 4 8 6 20 12";
	
	final coins103 = parseInput(
		"10 6
		11 19 5 12 6 1 9 7 18 3
		15 6 1 3 7 4 16 10 8 13
		8 4 10 17 14 20 12 1 18 16
		11 5 8 9 2 18 14 6 12 3
		6 13 10 19 3 12 1 5 9 14
		4 1 14 20 5 18 6 8 11 12" );
	
	final coins103Result = "2 20 16 14 4 10 18 12 6 8";
	
	final coins104 = parseInput(
		"10 6
		20 2 19 17 13 12 14 8 5 10
		7 2 16 12 6 8 18 10 19 11
		9 18 5 19 10 12 8 20 14 16
		4 12 18 2 16 7 8 10 11 5
		7 15 1 5 16 19 2 18 10 20
		16 2 12 3 5 4 20 14 13 15" );
	
	final coins104Result = "12 10 6 14 2 20 18 8 16 4";
	
	final coins25 = parseInput(
		"25 7
		45 16 28 49 14 41 38 34 43 23 27 25 30 9 50 29 37 36 24 5 22 46 39 15 35
		5 48 21 38 43 47 41 15 22 28 7 4 23 8 33 6 12 35 30 20 32 1 13 34 45
		16 31 46 23 48 37 15 41 19 21 12 34 18 5 6 8 33 29 17 2 14 13 35 30 49
		27 37 38 28 8 9 17 29 16 43 41 47 3 10 50 7 45 40 34 21 49 44 5 39 36
		7 3 44 9 50 29 13 22 37 19 24 26 41 47 28 18 6 39 49 34 25 43 10 35 16
		7 45 14 40 5 49 17 25 4 28 23 39 34 6 19 13 29 12 43 24 41 15 33 1 3
		3 22 27 49 33 34 15 25 42 28 26 16 37 47 43 48 24 12 18 44 19 20 13 7 35" );
	
	final coins25Result = "16 30 26 46 12 34 36 10 22 38 24 44 8 6 20 28 50 40 4 48 42 2 18 14 32";
	
	final coins50 = parseInput(
		"50 12
		79 8 86 54 99 68 72 4 88 87 100 37 33 76 65 95 74 51 62 94 10 28 92 46 7 84 24 66 25 16 27 53 85 64 13 49 59 48 17 12 32 90 77 35 82 43 26 42 3 75
		47 12 50 66 77 16 32 24 82 69 45 78 7 53 51 52 8 13 46 14 79 100 11 74 58 2 91 1 62 96 22 73 34 42 88 10 38 6 89 31 23 4 63 81 28 56 37 80 99 87
		90 75 87 24 58 15 86 79 51 8 32 57 69 88 83 21 76 25 11 13 100 31 49 38 55 22 26 35 59 77 30 64 37 99 72 16 29 14 89 34 47 44 63 95 50 62 85 41 10 42
		30 58 84 31 99 50 1 82 54 71 55 98 70 3 37 26 49 5 83 100 2 87 29 66 13 56 79 81 61 7 96 45 97 28 62 6 17 90 32 33 52 75 94 69 73 67 74 27 93 92
		38 63 50 72 55 99 48 40 76 11 86 42 43 98 64 74 26 93 44 6 70 69 56 54 52 46 13 10 36 53 82 49 67 2 91 32 16 62 24 75 3 79 39 4 22 21 57 96 17 89
		40 60 58 22 62 78 71 1 49 65 20 72 84 21 68 85 81 44 9 12 41 29 59 93 67 16 48 15 10 2 90 13 57 30 52 33 45 70 14 37 95 42 92 83 23 94 54 34 98 39
		78 29 67 24 89 74 88 21 66 41 39 56 77 64 90 80 33 2 65 36 60 26 34 48 51 76 58 9 11 25 44 1 6 72 87 83 84 10 69 62 99 54 96 42 17 53 18 22 16 55
		77 80 9 69 15 42 6 4 27 58 51 2 79 1 20 56 3 17 54 57 93 44 18 100 48 71 33 30 8 29 40 91 64 63 89 96 72 11 97 25 23 78 21 61 41 19 36 65 12 81
		98 43 11 41 87 29 57 37 34 75 17 79 86 61 76 62 89 4 67 65 18 27 74 95 9 20 52 63 68 39 73 7 35 80 30 56 5 54 91 23 33 88 97 70 71 21 31 12 45 6
		22 3 64 26 32 56 5 83 68 63 20 24 52 50 82 40 86 7 47 100 81 17 16 58 95 31 70 18 62 60 80 12 2 51 67 15 72 61 90 89 11 30 46 36 38 93 28 57 6 78
		27 11 14 41 88 72 76 7 35 89 20 83 8 95 78 31 9 61 25 34 69 33 6 50 54 29 36 1 85 60 5 13 97 100 30 51 45 91 21 62 66 12 58 80 63 71 74 40 26 77
		63 72 48 68 12 77 8 60 9 39 54 38 35 45 16 44 28 40 43 50 18 11 56 83 57 99 71 53 37 93 74 82 25 61 92 75 95 6 49 90 19 22 98 81 1 34 14 26 46 5" );
	
	final coins50Result = "86 34 42 44 32 94 18 74 14 62 28 26 52 22 46 48 38 2 36 100 82 58 64 54 80 98 30 12 66 6 10 84 50 8 68 24 72 78 70 60 76 4 56 40 92 90 88 96 16 20";
	
	final coins100 = parseInput(
		"100 12
		78 104 170 181 72 41 8 66 122 63 79 150 27 35 42 9 44 1 47 140 137 100 91 195 87 30 15 77 163 36 95 129 56 190 192 17 186 89 94 24 38 139 162 153 86 58 172 43 31 81 196 187 159 131 110 133 126 156 185 120 74 13 60 97 88 184 90 167 113 34 164 128 130 177 82 193 49 147 29 75 116 199 12 4 188 145 65 25 70 121 108 141 2 168 71 157 143 5 111 173
		115 128 20 77 173 111 103 35 195 188 54 65 199 16 163 10 148 69 75 171 81 29 139 41 113 160 26 190 150 119 175 67 76 6 117 25 84 38 179 114 14 34 138 167 166 57 7 143 194 193 4 170 141 30 27 64 19 66 123 191 43 112 39 45 51 168 33 36 70 5 120 161 181 137 55 42 61 183 126 129 49 135 149 106 59 28 192 79 89 131 53 196 40 144 140 134 95 105 197 164
		98 41 57 117 195 1 91 95 161 90 16 65 169 18 147 131 135 186 48 58 50 198 25 179 92 151 184 29 164 93 200 61 5 42 165 38 159 174 45 191 148 108 47 56 188 32 126 94 156 121 134 30 23 120 192 145 162 157 13 46 104 116 113 82 77 199 52 196 96 140 63 11 70 107 114 12 17 100 71 182 54 84 153 119 166 149 88 83 189 129 193 132 103 105 2 144 76 124 180 68
		54 122 110 182 33 165 169 112 5 129 27 106 193 180 77 119 176 97 190 183 125 35 49 42 172 161 102 63 98 117 166 55 29 186 118 76 137 87 68 171 18 194 96 133 101 162 23 83 37 184 82 114 17 36 56 113 141 185 156 73 121 20 86 198 173 79 6 57 163 66 147 99 132 195 53 116 61 103 109 64 131 197 15 4 21 7 127 100 62 196 179 91 146 123 47 168 44 174 3 10
		72 146 58 18 71 5 186 113 130 127 122 177 194 181 6 110 169 119 190 165 22 145 40 88 163 107 32 90 138 55 86 4 109 184 189 199 38 80 155 172 93 30 108 28 148 62 185 187 87 70 150 81 49 140 61 85 82 69 101 79 161 178 137 19 7 50 14 174 95 153 132 160 133 198 131 143 106 104 1 193 162 76 170 12 46 96 156 15 44 57 99 166 68 175 118 141 29 24 26 21
		15 97 197 47 123 62 155 53 29 68 40 28 177 1 128 7 55 160 77 120 82 64 143 188 73 80 93 105 140 182 153 89 186 144 122 117 56 48 109 133 194 126 9 189 106 45 130 72 190 6 3 96 158 139 67 49 12 66 111 83 195 78 57 104 46 90 173 102 5 132 118 91 4 60 131 26 85 137 71 191 172 38 116 176 34 51 81 124 166 23 25 185 161 32 164 79 187 113 69 156
		102 43 80 127 194 198 35 137 63 58 4 165 68 49 44 95 125 17 156 84 89 103 9 150 121 41 140 179 48 86 149 21 90 65 109 181 64 22 99 14 92 161 24 73 19 187 67 33 3 23 172 88 27 69 110 13 193 189 60 163 5 78 167 51 146 55 177 133 29 185 190 126 34 12 40 148 98 66 7 111 136 138 71 196 8 93 106 1 42 50 59 186 108 77 20 143 87 154 116 166
		188 10 111 117 80 65 181 169 153 103 30 93 158 190 107 9 197 98 22 48 95 165 92 154 133 64 14 163 13 97 8 101 187 110 179 56 173 3 33 52 144 83 121 28 167 35 40 106 156 54 42 157 38 185 63 96 74 55 61 7 59 67 102 86 139 75 51 69 170 41 136 31 174 171 115 21 192 140 36 180 164 44 196 58 146 5 135 4 12 29 47 15 116 53 27 119 77 71 149 200
		51 160 90 183 55 30 26 133 72 156 37 186 167 178 78 93 170 92 176 158 3 188 150 81 35 108 189 125 8 96 155 163 29 113 123 177 74 48 27 174 192 24 182 112 65 137 68 103 84 114 42 159 16 22 173 144 105 6 49 147 97 17 146 61 94 198 33 67 82 126 18 91 165 127 153 116 100 145 53 157 10 34 11 129 191 102 166 151 47 5 9 180 66 21 62 122 131 135 56 86
		116 105 138 196 80 55 27 117 60 37 174 157 53 154 161 121 103 104 150 167 43 76 46 195 192 59 7 5 63 48 77 58 38 106 135 182 73 147 50 64 134 153 19 99 49 115 97 164 93 191 119 84 193 13 70 45 114 17 118 51 122 100 185 23 126 120 124 111 112 42 102 146 179 41 34 156 177 31 57 180 198 107 14 79 171 184 108 75 4 152 36 200 151 128 1 98 144 95 113 12
		5 173 62 171 7 96 159 109 35 69 59 134 47 174 40 121 58 167 125 101 105 112 68 136 127 158 26 161 11 42 104 165 49 54 80 102 65 12 146 27 189 168 157 9 1 122 21 24 116 196 18 45 141 51 191 77 148 22 39 131 19 184 135 70 190 145 179 66 37 186 16 15 79 13 28 166 8 2 181 30 144 14 180 130 150 153 137 197 29 169 61 119 170 139 81 163 53 114 188 95
		71 175 168 131 95 192 132 160 197 1 106 3 186 122 174 92 23 33 143 139 138 78 19 29 140 129 60 32 182 130 126 188 110 43 68 102 41 194 191 98 147 88 84 158 4 163 156 65 63 86 38 58 195 66 179 13 46 16 171 97 184 28 73 87 82 189 8 150 49 91 134 54 190 142 9 20 127 128 24 48 31 146 2 135 162 200 42 173 7 77 187 18 183 100 161 34 21 64 136 155" );
	
	final coins100Result = "10 70 142 94 76 4 6 84 28 56 120 170 146 32 152 166 104 46 140 156 62 96 86 138 52 162 88 2 8 82 60 26 118 184 100 112 30 68 178 92 98 150 42 144 174 14 168 176 148 188 126 130 110 66 192 18 136 186 24 78 160 58 38 164 80 154 134 172 200 198 48 180 64 40 122 190 20 196 194 106 74 124 128 132 34 90 50 116 54 72 182 12 16 114 36 44 158 22 108 102";
	
	final coins150 = parseInput(
		"150 15
		
		
		
		
		
		
		
		
		
		272 296 42 236 234 175 184 126 95 55 232 287 136 190 108 171 230 27 297 156 86 124 7 50 15 298 226 60 73 249 10 49 284 198 208 89 207 239 268 291 202 97 280 242 151 293 44 300 279 33 197 94 290 43 240 200 189 19 30 299 196 164 160 28 142 112 93 185 65 61 41 135 222 118 96 137 56 8 157 154 294 128 167 78 12 20 150 64 23 218 66 91 63 176 235 119 179 170 62 161 54 295 90 278 241 214 139 40 217 237 101 168 75 5 116 36 270 98 265 6 259 69 213 133 203 219 288 74 17 18 84 143 144 70 39 194 286 181 271 11 209 183 122 115 58 153 158 275 16 255
		
		
		
		
		165 122 97 61 154 65 245 94 244 190 40 50 176 129 6 209 47 136 225 145 164 26 202 30 115 296 257 137 249 58 184 110 299 173 300 243 56 162 95 11 82 69 187 203 207 282 85 213 44 80 53 259 5 222 161 117 201 229 71 283 134 16 182 151 105 197 251 48 191 289 205 7 120 156 166 260 196 155 102 248 128 81 149 67 247 241 63 135 100 261 224 92 21 77 37 138 183 189 42 210 263 231 204 142 25 89 211 132 238 240 188 111 4 292 74 101 279 84 139 113 127 9 194 160 36 250 34 70 32 98 68 163 109 14 116 103 130 291 193 46 157 177 269 242 59 106 76 133 33 2" );
	
	final coins150Result = "222 164 220 228 200 24 70 76 248 292 28 260 278 80 128 30 172 300 64 26 204 120 296 12 92 176 294 34 156 280 114 262 146 118 22 126 130 244 208 42 286 190 234 74 256 14 2 52 274 122 212 270 272 160 298 170 144 178 78 106 94 98 58 268 86 142 38 88 252 258 240 166 198 36 232 254 224 158 104 56 148 218 226 132 6 162 62 250 60 110 82 152 102 124 72 66 236 50 206 196 18 174 90 192 140 290 246 136 138 48 84 202 20 242 168 230 40 4 68 32 264 284 112 108 266 96 154 46 150 216 54 10 282 194 8 182 44 210 116 186 16 288 184 238 214 276 188 100 134 180";
	

}

