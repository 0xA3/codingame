package test;

import Std.parseInt;
import test.Readline.initReadline;
import test.Readline.readline;

using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite{

	public function new() {

		describe( "Test process", {
			
			it( "3D basic", {
				final ip = _3DBasic;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( _3DBasicResult );
			});
			
			it( "2D basic", {
				final ip = _2DBasic;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( _2DBasicResult );
			});
			
			it( "3D simple (lexical check)", {
				final ip = _3DSimpleLexicalCheck;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( _3DSimpleLexicalCheckResult );
			});
			
			it( "Quite large number of dimensions & vectors", {
				final ip = quiteLargeNumberOfDimensionsVectors;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( quiteLargeNumberOfDimensionsVectorsResult );
			});
			
			it( "Biggest number of dimensions", {
				final ip = biggestNumberOfDimensions;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( biggestNumberOfDimensionsResult );
			});
			
			it( "Biggest number of vectors", {
				final ip = biggestNumberOfVectors;
				Main.process( ip.d, ip.ords, ip.coords ).should.be( biggestNumberOfVectorsResult );
			});
		});
	}

	static function parseInput( input:String ) {
		initReadline( input );
		final d = parseInt( readline() );
		final n = parseInt( readline() );
		final ords = readline().split(" ").map( s -> parseInt( s ) - 1 );
		final coords = [for( _ in 0...n ) readline().split(" ").map( s -> parseInt( s ))];
		
		return { d: d, ords: ords, coords: coords }
	}

	static function parseResult( input:String ) {
		return input.replace( "\t", "" ).replace( "\r", "" );
	}

	final _3DBasic = parseInput(
		"3
		3
		3 1 2
		1 2 3
		3 1 2
		2 3 1"
	);

	final _3DBasicResult = parseResult(
		"3 2 1"
	);

	final _2DBasic = parseInput(
		"2
		2
		2 1
		0 1
		1 0"
	);

	final _2DBasicResult = parseResult(
		"2 1"
	);

	final _3DSimpleLexicalCheck = parseInput(
		"3
		6
		3 1 2
		-613226257 342166228 533897480
		254786100 414564234 533897480
		254786100 -228769559 533897480
		254786100 330086295 533897480
		-426805636 -228141293 533897480
		-805442806 -135129331 533897480"
	);

	final _3DSimpleLexicalCheckResult = parseResult(
		"6 1 5 3 4 2"
	);

	final quiteLargeNumberOfDimensionsVectors = parseInput(
		"40
		32
		37 20 13 15 40 36 33 35 21 9 2 39 12 34 14 8 22 4 11 26 30 16 17 19 32 5 27 6 7 23 31 1 25 28 29 38 18 10 24 3
		-4 -8 -2 -2 -8 -3 -4 -8 -1 -4 -4 -2 -5 -0 -3 -2 -8 -4 -9 2 4 0 4 4 2 7 5 8 5 7 2 7 3 2 9 1 0 1 2 0
		-2 -1 -1 -9 -8 -8 -4 -3 -1 -6 -4 -4 -2 -1 -8 -4 -3 -7 -7 -7 -5 8 6 9 3 6 0 6 0 3 3 2 7 4 6 8 5 4 2 1
		-0 -3 -7 -3 -4 -1 -7 -4 -7 -4 -4 -2 -0 -4 -8 -0 -9 -3 -3 5 5 0 5 8 4 3 5 2 5 0 1 4 9 0 5 5 5 8 3 5
		-5 -6 -7 -1 -9 -5 -1 -1 -4 -7 -7 -5 -0 -6 -3 -3 -1 -7 -8 -6 -7 -0 6 5 5 2 6 4 0 7 8 2 4 1 6 1 9 3 4 7
		-5 -2 -1 -7 -2 -5 -2 -2 -6 -7 -3 -2 -2 -0 -3 -6 -1 -4 -8 -4 -0 -1 5 9 5 2 2 2 2 5 6 8 7 7 9 1 3 6 2 9
		-4 -5 -0 -2 -3 -4 -8 -1 -9 -2 -0 -5 -8 -2 -3 -1 -4 3 2 0 5 8 4 0 9 2 2 4 8 8 8 2 1 8 6 4 1 2 2 7
		-6 -8 -6 -8 -8 -9 -4 -3 -1 -7 -0 -5 -4 -3 -0 -5 -0 0 3 3 3 6 7 7 5 8 1 6 7 1 6 1 8 4 6 3 4 8 9 1
		-9 -6 -6 -2 -2 -9 -8 -0 -3 -8 -3 -8 -9 -1 -1 -4 -7 -8 3 5 9 3 7 3 5 4 0 2 2 8 7 1 3 8 5 5 8 5 5 5
		-0 -0 -4 -5 -0 -2 -6 -8 -7 -4 -0 -7 -0 -6 -3 -9 4 9 4 3 9 1 4 5 4 1 6 9 7 9 1 2 7 7 2 9 2 0 3 4
		-9 -7 -2 -8 -6 -7 -8 -9 -1 -1 -3 -5 -8 -0 -3 -7 -6 -3 -0 9 7 0 5 0 1 9 2 3 5 1 7 9 9 4 7 2 3 7 0 0
		-2 -2 -0 -0 -5 -4 -5 -7 -7 -6 -9 -5 -7 -8 -3 -7 -1 -4 -9 -0 -6 -2 4 0 3 5 2 3 2 2 4 3 4 9 2 8 5 3 5 9
		-7 -7 -7 -2 -6 -7 -4 -2 -7 -7 -0 -5 -7 -8 -8 -9 -9 7 2 5 8 5 5 1 3 4 6 4 7 9 3 2 2 0 0 8 9 7 8 0
		-8 -3 -6 -6 -4 -1 -4 -1 -7 -2 -9 -9 -0 -5 -7 -4 -5 -2 -7 -0 -5 -8 -9 8 5 8 4 5 2 8 9 2 1 0 5 8 3 4 7 4
		-9 -7 -0 -1 -8 -7 -4 -0 -8 -0 -2 -3 -5 -1 -7 -5 -5 -1 -6 -7 5 6 6 1 8 2 8 3 7 8 2 9 5 7 3 5 1 0 3 7
		-6 -9 -1 -5 -2 -8 -6 -8 -5 -0 -8 -3 -1 -6 -3 -0 -5 -2 -0 -5 -5 -9 -0 -2 2 4 4 7 6 9 2 1 6 3 9 7 2 6 1 0
		-6 -5 -0 -3 -6 -6 -4 -9 -3 -8 -5 -1 -4 -1 -7 -0 -3 -7 -5 -1 -4 -0 2 4 1 5 3 3 4 5 9 8 0 6 6 2 0 1 9 4
		-2 -9 -2 -3 -9 -6 -4 -5 -7 -1 -8 -1 -6 -0 -4 -9 -1 -0 -4 -4 3 2 0 2 5 0 5 4 3 6 4 6 1 2 2 2 2 2 8 7
		-1 -7 -9 -3 -4 -8 -1 -7 -5 -0 -5 -9 -7 -5 -1 -3 -9 -0 -0 6 6 1 6 6 9 3 6 5 4 1 5 4 2 0 4 2 5 7 1 9
		-0 -7 -1 -9 -8 -2 -7 -3 -3 -5 -3 -2 -8 -0 -1 -7 -1 -8 -3 -6 -7 -6 4 3 0 9 6 0 0 0 5 2 2 5 7 9 3 5 9 9
		-4 -8 -2 -9 -2 -6 -3 -6 -0 -7 -3 -2 -3 -1 -4 -0 -2 -6 -3 -1 -8 9 7 8 1 0 4 8 2 5 4 3 0 9 2 2 6 0 7 3
		-0 -6 -8 -9 -6 -2 -9 -8 -7 -5 -0 -5 -6 -3 -4 -0 -5 -1 -7 -2 -4 -4 -6 -7 1 3 0 9 0 8 6 5 6 4 8 8 8 8 1 2
		-9 -9 -4 -4 -1 -1 -7 -6 -9 -7 -6 -5 -3 -1 -0 -1 -4 -6 -9 -5 -6 -9 6 1 8 7 7 2 7 8 8 0 2 5 9 4 0 3 0 4
		-5 -0 -2 -7 -7 -0 -5 -4 -4 -6 -4 -9 -1 -4 -1 -8 -6 -2 1 5 0 7 4 8 7 6 0 5 6 0 2 1 7 5 5 1 1 1 2 4
		-4 -5 -1 -4 -0 -9 -7 -4 -9 -2 -5 -2 -5 -2 -9 -8 -7 -0 7 6 2 5 0 1 1 3 2 2 6 1 3 1 0 2 2 5 6 3 7 8
		-9 -6 -5 -3 -4 -8 -6 -8 -7 -9 -3 -3 -3 -7 -3 -5 -1 -6 -8 -0 -1 -6 6 1 3 7 9 5 3 7 3 4 3 6 6 8 0 2 2 8
		-9 -2 -2 -3 -9 -3 -5 -2 -8 -1 -1 -3 -5 -7 -8 -0 -7 -3 -4 -5 -5 9 4 3 7 9 4 5 6 6 0 6 7 1 0 0 6 7 1 6
		-7 -9 -3 -3 -9 -2 -9 -2 -8 -7 -2 -4 -3 -8 -1 -3 -9 -3 -9 9 1 0 4 7 6 5 9 9 0 3 9 3 7 7 3 4 7 7 0 3
		-6 -6 -3 -8 -6 -8 -0 -9 -9 -6 -6 -7 -4 -0 -6 -1 -3 -9 -5 -7 5 9 2 7 8 7 5 6 4 0 5 8 2 8 8 9 3 7 2 6
		-4 -3 -7 -0 -4 -1 -3 -6 -2 -9 -8 -4 -3 -1 -8 -9 -1 -4 -8 -9 -3 -8 -2 -4 -4 5 3 8 1 0 3 2 3 0 9 7 6 1 7 8
		-8 -1 -1 -1 -7 -1 -5 -9 -0 -0 -3 2 3 7 3 4 2 2 7 3 8 6 5 0 1 7 7 6 4 8 5 8 1 2 5 8 9 9 7 2
		-2 -8 -4 -6 -9 -3 -7 -9 -3 -7 -7 -5 -2 -7 -7 -3 -2 -2 7 6 8 7 1 4 7 9 8 9 7 9 0 3 6 2 1 0 0 5 5 6
		-4 -8 -1 -2 -8 -3 -4 -8 -1 -4 -4 -2 -5 -0 -3 -2 -8 -4 -9 2 4 0 4 4 2 7 5 8 5 7 2 7 3 2 9 1 0 1 2 0"
	);

	final quiteLargeNumberOfDimensionsVectorsResult = parseResult(
		"22 16 25 1 32 31 14 6 23 15 17 9 28 19 5 13 10 7 2 11 3 18 29 26 20 24 27 21 8 4 30 12"
	);

	final biggestNumberOfDimensions = parseInput(
		"128
		3
		128 124 113 24 35 3 18 29 58 38 117 86 120 75 62 65 127 11 31 103 66 109 59 82 83 30 7 44 45 74 105 21 46 111 97 19 96 37 17 77 10 92 87 88 52 61 85 106 72 126 53 78 25 100 119 20 6 71 89 42 94 110 93 33 123 9 112 104 69 99 51 8 26 70 43 34 98 56 13 102 15 14 27 55 91 118 76 114 67 95 60 23 64 90 40 12 63 108 50 54 4 1 73 36 107 84 41 79 49 81 16 48 121 122 80 28 2 101 115 68 125 32 116 47 39 5 57 22
		-60460 -36506 -47061 42133 -44096 5355 -48443 34622 -76732 74920 22713 97108 -86240 -10612 25965 -93359 50358 60253 41260 -37894 86490 26609 22383 -2716 -10967 78591 40469 -73494 45919 -79165 -7253 -95154 -62246 -53234 98687 14281 18390 16954 -4377 23476 -92384 -83094 90901 -95163 14356 -91756 -88786 -82031 70079 -25745 12161 -16752 -26638 53533 80641 -66701 -13781 -49234 90042 18516 14246 -29197 90366 -7236 -45214 -17521 7476 -17078 -51254 31966 -66777 -43982 -40611 -30411 -39779 -78337 -90071 89093 40142 85615 3330 92791 -17300 51227 -40087 4109 -59767 71811 -70342 54696 -92344 38162 -67921 40539 -99407 1033 59700 77543 35174 -34005 4703 -90543 36415 -47285 23245 44028 -42208 -22340 31652 45659 34080 48491 3423 57000 69755 5423 79854 -66949 3053 -3733 90709 -97402 -22947 -15313 72616 -95733 63912 -41580
		40433 87698 44010 -37167 -55905 -46095 -56580 -66680 -66868 -66910 9120 61240 64823 -65015 -51890 -41990 50066 77731 41659 -73643 12801 79851 -64423 47371 -81488 -91463 34520 43484 -11898 -23976 32223 -80478 73963 -80309 -18177 -34339 -66304 -42922 -99810 59667 16136 -64329 -81425 20672 -89906 74829 -5524 -68320 -33904 26185 52484 62548 45871 -62081 48556 -91466 83351 430 68099 16404 16188 -5081 -74091 -9313 -49545 -27280 6021 14474 71282 -19675 -79064 40485 -57973 58222 -21438 -31886 -79167 -38547 -3939 -64090 4274 18367 45137 16838 -46425 20265 89894 85937 35645 -75911 86836 57299 -44071 24610 69038 41935 -54651 72511 -6562 -95339 17460 -96985 -53623 -52931 -10313 -97589 -40849 63096 78231 -27069 -47376 75673 3905 69865 -9408 56341 21487 42139 -71885 -9050 57323 -22298 54282 55555 -79919 -7317 -43568 -8095
		-45206 -42933 -14249 75514 33231 95617 71715 57718 95066 -72288 -90363 50747 -82609 11964 -4924 70444 -74438 35957 57391 -57908 39080 -37504 -50388 58997 -74069 21869 -39957 -3013 -78077 -8910 -52215 -85965 67858 94294 46866 -82024 21954 58521 -27075 -26818 42153 9279 28012 -93302 62065 -53702 -45930 -55091 24776 46342 -76885 96816 -17659 -16900 -45001 86636 73692 -38837 -22832 153 -11912 89176 4122 -55434 -87460 13051 -16256 67538 59833 -22105 64589 -12682 477 -41840 63653 84219 60415 -23573 -44144 6996 -57167 61461 -28927 -33985 31758 62167 -66282 -24864 -94421 -47252 -8093 -76144 -64646 -80045 88586 -71357 -25768 -64579 85961 47458 -66872 -78332 -40677 -31052 64667 94108 -75274 -86773 27480 -86473 90482 64038 15545 8375 -19261 -97433 -88345 -56947 38508 87169 -27346 -94147 43123 36966 23630 28540 5485 -28599"
	);

	final biggestNumberOfDimensionsResult = parseResult(
		"1 3 2"
	);

	final biggestNumberOfVectors = parseInput(
		"8
		64
		3 7 2 5 4 1 8 6
		632913 368313 441528 -432854 732223 -904193 109824 -275675
		844 -703677 -952478 -861047 353557 29212 502096 -160490
		-755416 -951008 86128 514068 -633222 91297 -319411 779702
		-683174 -414267 -327295 -462071 576256 -181699 -746250 500763
		446540 -678426 983793 -338613 567262 473777 -137232 -471210
		534512 -68486 -456601 264842 828184 -2036 -96969 -270873
		-273719 674725 202008 803884 226255 682764 215778 -812662
		-385183 -914532 -732293 651620 -37074 -491778 -941217 263986
		328223 -82913 252460 589958 -886746 -86995 -735524 -100701
		-204490 28300 221012 159610 735162 954055 338843 -623593
		-528585 971472 -559172 238128 562372 -793649 139863 475419
		457056 -97343 -892158 -95599 -457013 -104824 937225 -304047
		21603 -858808 605334 -32379 -604914 201079 956665 12930
		-444340 -204216 -199470 -711081 -513103 -820511 594945 38884
		-105534 -265286 867681 -385164 935137 610919 929074 -988180
		596137 138918 -364992 -359242 -652717 -442312 -404064 943082
		893104 -67535 -79680 -27300 817108 658175 550139 270614
		108043 -380396 570469 -750963 531266 -844630 557917 -172998
		-638241 536129 -305646 858351 702606 207324 -370542 390374
		-78782 -984541 938318 -981110 -112148 -847103 -695630 -686144
		-364259 -816146 659902 929342 -445471 -357893 12647 -857585
		123997 780048 -858516 -70714 480554 320657 -70981 770762
		-472182 773257 550014 -929155 -819781 190145 25279 589003
		891248 -722175 372479 -745704 362498 -478162 -59743 -169773
		-11378 -817452 -883006 691012 953470 -489123 14232 -108155
		-373711 -431579 -891738 -886008 -395706 968004 738477 395132
		518963 -349010 244421 -538077 -56143 890230 27182 -353003
		976230 -207610 -416977 475695 525180 565505 -174381 -137036
		474713 -327339 -978090 -91954 -62077 897495 211962 -886144
		821161 -541799 -141637 241160 523283 -8723 137496 -859884
		-18746 107396 -611260 -468823 513906 -252039 -670404 499851
		651486 918566 507016 660255 -817621 -170010 242111 -637259
		981832 -579055 -831394 909336 410283 -513213 370432 -358073
		814344 812651 -378207 252811 -545021 713394 -885960 -417235
		84329 -449675 144364 605681 -473763 -385552 233276 222285
		-612041 -593723 900413 554908 -707347 -241550 604886 494980
		978689 -986589 471962 640377 -207914 -900325 -636935 -599101
		-620817 -300328 290602 502454 -176204 -838717 805718 -660384
		-78564 -38344 331755 -490853 -224233 83983 -413234 512452
		-85718 444976 421104 -813996 997160 8423 259974 898741
		-103937 539784 -812225 -192113 686560 -55992 519502 -446051
		984579 628661 -731973 460304 -580518 224049 580164 -266920
		-265385 -951934 -644351 776628 717561 -188545 152034 -823379
		-728756 -631700 847071 416986 326902 460843 -819570 -861525
		933004 -893091 808017 560904 -384718 -184753 -931192 -74395
		-104462 -919518 -174102 184986 -32060 -556381 173633 -267032
		505425 335037 960727 -853794 -946365 -354536 916051 662922
		801796 550049 -567484 -893876 -133375 134628 76604 -886931
		469908 -462684 -927979 -644789 195142 33236 -677167 245728
		-74245 563364 -113241 -925518 -605274 600798 -50101 297753
		69941 31058 -768845 -50084 663129 -400380 155767 -148476
		-842944 -150175 977091 -71702 535785 -961312 444675 318808
		-164546 -545482 283358 -505116 469859 866861 -188741 610290
		-901806 -168463 -710699 -856726 246191 727249 -767201 -237129
		211507 -392471 277384 -828685 -874462 -404136 -217911 87393
		-992736 -266578 -177139 879762 -351645 -341310 -791497 108444
		957312 -268146 454278 455039 555833 -357296 423287 953495
		557731 -583453 654634 -192323 -821587 261575 -861078 -862467
		-892901 154651 116811 -829026 990557 -985509 -427175 -991073
		-396575 439707 959969 -657588 -802917 801175 191180 -960304
		-438477 -684748 -575448 -845222 -931804 946897 -115370 -322282
		1082 -554611 -407348 772327 654805 -3322 137132 -867072
		257106 -592582 658607 -444781 983423 144390 126377 834619
		-635596 -794850 955333 -193837 122101 250294 -863274 -813092"
	);

	final biggestNumberOfVectorsResult = parseResult(
		"29 2 49 12 26 25 22 33 41 51 8 42 54 43 31 61 48 11 6 28 62 34 16 4 19 14 56 46 30 50 17 3 59 35 7 10 27 9 55 53 38 39 24 40 1 57 37 32 23 18 13 58 63 21 45 44 15 36 20 64 60 47 52 5"
	);
}
