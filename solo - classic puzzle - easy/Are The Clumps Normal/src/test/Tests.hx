package test;

import Main;
import Std.parseInt;

using buddy.Should;
using StringTools;
using Lambda;

@:access(Main)
class Tests extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			
			it( "Simple Normal", { Main.process( "157285" ).should.be( "Normal" ); });
			it( "Simple Abnormal", { Main.process( "25747" ).should.be( "3" ); });
			it( "Abnormal At The Last Second", { Main.process( "338066" ).should.be( "8" ); });
			it( "Wildly Abnormal", { Main.process( "2997792" ).should.be( "7" ); });
			it( "Bigger than 2^64 Normal", { Main.process( "18573820495041201061" ).should.be( "Normal" ); });
			it( "Way Bigger than 2^64 Abnormal", { Main.process( "7815631942725249636863841649976213178541" ).should.be( "5" ); });
			it( "Lots of Abnormal", { Main.process( "10081803" ).should.be( "4" ); });
			it( "Rep Digit", { Main.process( "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111" ).should.be( "Normal" ); });
			it( "Take The First Deviation", { Main.process( "131819" ).should.be( "4" ); });
			it( "Maximum Normal", { Main.process( "856617079988280637847797583355202038834607083642543582191483718680274095256978269395586808946848805097941700203376579845203204266505470413762207833140134933814390624441410227860814857126383541760406972957537597816961192117878466982854625004239694094891634918408899628917863838770904886661736321707709273640934698850457257204171585100965874210206273455027995322196719716690804026007415279762811511688213893535020681523544602803970769688921294583453071350275990739711565083514841072056151059969946206245168332733549359649699963889721694612831565764103991329941213577380907877617756518378739337584303606414665471987884767847376783134190469613970998085043855745751174562304146439959104559874963084265834336378403699105189213879879075832951318389535551208794819901059863037844672789147418544795323153246247874915737144114778928819580561379864977536353352006464825306883778134985501500588817346566448470664286858587076832136159912482508333317237471031438556365310644678683989469092579187903374513675871819" ).should.be( "Normal" ); });
			it( "Maximum Abnormal", { Main.process( "685165436285047528356410692722125420199102233049094233322521351350201519946939476436449090707827851188707569796031961258057453481372521410112609803537913841219838441300574105698656451666892455075041157676563656138552849373018690461707346457583663586691697054577277901323457310561506366682526610577691649650077716360451453377531791077763839945873110937182757155383738805916542546856123337282192262015365544507678564397299474738830820021216310592307507701055244745034849912527054469501501318526278352167733050438726877561615046532828800379150193061117230877743143012336063376053812249912256214454047816584538829075049398569992121421397628789720014925641070428819487231382003535046352578257806439786058657542504759922089608633158101859674267039665227876415546199586407173031703544984386679003950001954999200198541721343186411382503770077295891776178355084351557444973567064349297878721690507724215460994289345086813941115697564571377215572015032695974113287238277553089305923497435369883830032343272329" ).should.be( "5" ); });
			it( "Humongous Binary", { Main.process( "100011010011011000110111100110111011001111110010111111010111011011011001101010001000111011110101111010010010110000110110101011111000110101001100000100001100011001011001111101100101011010100101010101001101000001110110001100100010110011111011010010001001100110110100100010001010001101001110101001000001111000111110000011001101101111111100101001000011011010101011100111001010101000111001111000110000010010110000011010001001000010000101110000100011111101100001101000000110100011101100010101001101011001011110101010001001010110001000010011011110101111111010101100001010111001010010101101110100011001011101001010101110011111110001111100101110100111110100011011101000000110000011001001101101000000110101111111000101000100000101001111110100101111100101101001111111010110011000010000101100110011110110111110100101100000100000110011111010000010100111000101100100000111010101101101010000110101001000100001000111111010101010011010101001101110001101010111111100111111001100111011101000001100011110110111001100111" ).should.be( "Normal" ); });
			it( "Cooldown", { Main.process( "37" ).should.be( "4" ); });
			
		});
			
	}
	
}

