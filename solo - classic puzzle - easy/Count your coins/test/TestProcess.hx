package test;

import Std.parseInt;

using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite{

	public function new() {

		describe( "Test process", {
			it( "Easy !", {
				final ip = easy;
				Main.process( ip.valueToReach, ip.coins ).should.be( 2 );
			});
			it( "It's obviously way too much !", {
				final ip = itsObviouslyWayTooMuch;
				Main.process( ip.valueToReach, ip.coins ).should.be( -1 );
			});
			it( "It's way too much.. But less obvious", {
				final ip = itsWayTooMuchButLessObvious;
				Main.process( ip.valueToReach, ip.coins ).should.be( -1 );
			});
			it( "Two coin types", {
				final ip = twoCoinTypes;
				Main.process( ip.valueToReach, ip.coins ).should.be( 22 );
			});
			it( "That's hard to evaluate...", {
				final ip = thatsHardToEvaluate;
				Main.process( ip.valueToReach, ip.coins ).should.be( 45 );
			});
			it( "Why do I have so many different coins ?", {
				final ip = whyDoIHaveSoManyDifferentCoins;
				Main.process( ip.valueToReach, ip.coins ).should.be( 121 );
			});
			it( "How does this even fit in my pocket ???", {
				final ip = howDoesThisEvenFitInMyPocket;
				Main.process( ip.valueToReach, ip.coins ).should.be( 1095 );
			});
		});
	}

	static function parseInput( input:String ) {
		final lines = input.replace( "\t", "" ).replace( "\r", "" ).split( "\n" );

		final valueToReach = parseInt( lines[0] );
		final n = parseInt( lines[1] );
		final countInputs = lines[2].split(' ');
		final valueInputs = lines[3].split(' ');
		final coins = [for( i in 0...n ) { count: parseInt( countInputs[i] ), value: parseInt( valueInputs[i] ) }];
			
		return { valueToReach: valueToReach, coins: coins }
	}

	final easy = parseInput(
		"8
		1
		5
		6"
	);
	final itsObviouslyWayTooMuch = parseInput(
		"29
		1
		2
		2"
	);

	final itsWayTooMuchButLessObvious = parseInput(
		"246
		3
		12 7 26
		7 8 1"
	);

	final twoCoinTypes = parseInput(
		"154
		2
		66 76
		8 7"
	);

	final thatsHardToEvaluate = parseInput(
		"134
		4
		54 94 44 44
		9 3 6 8"
	);

	final whyDoIHaveSoManyDifferentCoins = parseInput(
		"366
		5
		94 90 71 23 82
		6 2 8 7 9"
	);

	final howDoesThisEvenFitInMyPocket = parseInput(
		"2589
		1000
		589 705 989 251 701 57 961 500 564 355 149 779 672 733 357 905 991 16 523 799 542 516 856 219 851 742 704 894 68 694 56 256 101 481 900 353 366 121 602 237 87 857 310 841 801 102 138 516 544 435 859 253 250 750 203 912 197 596 949 854 232 55 179 610 634 106 887 138 427 686 816 830 922 626 852 385 890 800 479 715 605 89 412 816 356 177 493 530 406 238 91 796 511 66 662 321 891 857 158 829 248 725 767 135 325 24 151 121 628 935 53 582 668 774 995 508 792 752 499 180 376 526 865 210 160 113 91 116 815 694 877 63 370 887 489 876 399 20 868 315 905 144 141 251 486 823 534 546 643 880 272 77 449 484 503 808 598 941 813 944 249 225 74 690 946 853 37 131 551 785 18 150 865 346 314 228 119 999 751 954 555 761 826 768 715 719 678 928 579 52 780 553 434 986 250 900 386 177 506 623 582 318 381 671 193 505 597 128 708 409 273 787 590 454 461 416 98 479 363 608 948 551 102 619 154 603 483 928 688 498 607 112 531 158 440 322 248 575 70 927 291 398 830 738 154 483 160 93 819 327 344 303 564 30 4 286 430 348 744 112 446 888 613 890 672 971 488 648 824 552 297 691 7 566 454 403 390 664 634 183 483 560 28 592 511 135 757 892 525 654 340 431 837 976 131 32 531 76 202 871 788 592 160 264 455 6 336 435 122 807 619 144 267 766 217 828 426 135 505 753 553 981 869 683 6 266 378 317 430 438 179 654 606 842 47 625 867 423 91 519 738 380 976 602 620 691 275 323 963 605 27 146 978 245 41 519 235 275 567 467 253 862 15 891 719 207 475 271 200 71 46 290 588 624 619 831 826 328 711 361 886 784 863 645 568 978 271 756 140 711 894 869 603 349 85 383 422 178 852 148 566 509 894 741 826 20 171 264 676 333 979 85 228 566 54 927 963 662 927 992 540 659 371 755 140 123 675 349 902 402 104 945 995 996 598 776 91 566 486 518 396 946 118 157 107 807 723 642 914 115 865 732 701 326 80 114 105 30 104 367 574 715 255 921 390 956 488 202 589 334 251 726 742 876 162 861 61 642 831 993 56 840 903 126 898 970 950 684 457 392 146 454 89 607 198 914 467 424 478 970 463 986 886 149 522 802 81 983 518 361 188 8 797 760 774 790 931 275 200 267 741 646 416 355 150 822 366 908 862 300 99 842 266 564 484 891 148 550 958 28 895 993 520 168 341 300 482 824 718 655 309 457 477 479 379 613 550 741 438 343 874 197 443 902 598 119 912 931 62 852 528 138 636 390 593 951 62 991 950 302 789 493 351 583 760 193 136 36 960 832 322 803 862 377 144 296 457 12 715 693 266 184 571 279 790 152 708 7 501 159 52 228 730 815 120 183 888 845 425 399 606 78 302 401 413 914 134 642 272 269 687 287 339 168 285 372 358 726 25 856 793 773 317 794 626 658 369 229 621 54 114 695 749 91 997 467 687 657 415 39 649 181 117 666 210 645 347 396 245 849 28 998 317 372 44 649 185 935 148 764 466 643 41 386 498 619 929 315 512 676 457 437 814 662 376 961 474 113 393 280 339 72 453 237 593 816 26 155 984 672 19 756 257 677 18 711 765 945 635 288 744 394 553 781 909 124 280 372 595 330 51 968 513 764 942 192 124 764 200 703 348 125 863 973 294 22 35 371 513 154 621 643 746 386 98 45 346 67 977 275 735 93 1 858 861 160 775 675 871 172 467 623 487 101 914 381 791 704 503 526 309 526 688 676 191 899 31 946 617 581 917 671 443 278 98 987 3 858 347 818 114 852 214 495 523 501 908 706 563 192 570 514 402 102 996 957 335 17 711 860 784 631 103 582 173 396 785 801 510 787 460 435 592 80 514 54 789 936 380 770 533 639 143 960 125 614 116 555 676 651 138 272 691 428 809 780 293 376 460 408 158 902 179 283 287 907 452 387 764 808 161 795 191 727 99 662 856 588 202 99 59 633 611 263 655 952 774 470 677 785 639 108 326 465 752 740 281 280 667 732 834 16 596 441 387 711 337 570 575 13 352 493 273 888 862 93 507 965 667 252 359 679 450 156 321 577 729 312 728 744 284 98 263 570 754 351 681 628 239 369 37 868 24 843 712 941 110 271 880 623 19 942 362 882 958 939 594 507 569 177 77 502 954 14 898 369 73 884 516 931 992 713 575 92 381 795 472 704 489 446 863 211 320 457 969 546 306 822 38 238 690 484 846 261 290 821 116 357 693 405
		
	);
}
