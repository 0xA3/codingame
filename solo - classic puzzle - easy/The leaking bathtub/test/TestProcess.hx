package test;

import Std.parseInt;
import haxe.ds.Either;

using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite{

	public function new() {

		describe( "Test process", {
			it( "Standard bathtub", {
				final ip = standardBathtub;
				Main.process( ip.s, ip.h, ip.flow, ip.leaks ).should.be( "01:14:08" );
			});
			it( "More leaks", {
				final ip = moreLeaks;
				Main.process( ip.s, ip.h, ip.flow, ip.leaks ).should.be( "00:17:24" );
			});
			it( "Unfillable bathtub", {
				final ip = unfillableBathtub;
				Main.process( ip.s, ip.h, ip.flow, ip.leaks ).should.be( "Impossible, 82 cm." );
			});
			it( "No leak", {
				final ip = noLeak;
				Main.process( ip.s, ip.h, ip.flow, ip.leaks ).should.be( "01:00:00" );
			});
			it( "Olympic swimming pool", {
				final ip = olympicSwimmingPool;
				Main.process( ip.s, ip.h, ip.flow, ip.leaks ).should.be( "65:04:23" );
			});
		});
	}

	static function parseInput( input:String ) {
		final lines = input.replace( "\t", "" ).replace( "\r", "" ).split( "\n" );

		final s = parseInt( lines[0] );
		final h = parseInt( lines[1] );
		final flow = parseInt( lines[2] ) * 1000; // cm³
		final n = parseInt( lines[3] );
		final leaks = [for( i in 0...n ) {
			final inputs = lines[i + 4].split(" ");
			{ height: parseInt( inputs[0] ), flow: parseInt( inputs[1] ) * 1000 } // cm³
		}];
			
		return { s: s, h: h, flow: flow, leaks: leaks }
	}

	final standardBathtub = parseInput(
		"12750
		60
		12
		2
		20 1
		45 3"
	);
	final moreLeaks = parseInput(
		"10000
		100
		125
		50
		17 3
		6 1
		89 3
		47 2
		59 1
		56 3
		27 3
		61 2
		28 2
		55 1
		92 3
		50 1
		75 1
		62 3
		57 3
		78 3
		51 2
		91 2
		22 3
		73 3
		94 1
		81 2
		61 3
		59 3
		13 2
		90 3
		27 2
		79 3
		50 3
		0 1
		64 3
		22 2
		6 2
		67 3
		51 3
		94 3
		36 3
		90 1
		81 2
		17 1
		96 1
		32 1
		3 1
		52 2
		73 1
		8 1
		84 3
		78 2
		2 3
		61 1"
	);

	final unfillableBathtub = parseInput(
		"7500
		100
		30
		13
		91 5
		76 2
		82 5
		85 4
		44 1
		28 3
		41 2
		61 5
		56 2
		35 3
		97 4
		58 5
		20 4"
	);

	final noLeak = parseInput(
		"8000
		90
		12
		0"
	);

	final olympicSwimmingPool = parseInput(
		"12500000
		300
		2800
		871
		231 4
		240 5
		116 1
		265 2
		58 4
		13 4
		263 5
		90 5
		210 2
		221 3
		275 3
		188 1
		165 5
		278 2
		221 2
		103 2
		2 4
		86 2
		187 2
		139 4
		30 1
		224 5
		269 1
		25 1
		178 1
		242 5
		102 1
		38 1
		171 4
		260 1
		182 1
		26 5
		70 5
		239 3
		173 3
		195 5
		279 5
		205 4
		288 5
		66 4
		226 3
		31 2
		245 5
		167 5
		221 1
		152 5
		231 4
		35 1
		170 5
		33 4
		272 4
		178 3
		117 4
		97 2
		191 3
		236 2
		187 5
		66 4
		37 1
		120 5
		60 1
		102 1
		76 1
		28 5
		202 4
		9 1
		155 2
		47 3
		64 2
		250 3
		102 4
		256 5
		274 4
		205 2
		10 1
		126 3
		205 3
		9 2
		0 1
		245 4
		111 2
		19 3
		247 5
		204 1
		254 1
		177 5
		197 1
		252 2
		103 5
		126 1
		189 2
		13 1
		236 5
		19 4
		48 2
		92 2
		156 4
		210 5
		190 1
		28 4
		179 3
		177 5
		116 4
		250 2
		7 5
		61 2
		74 1
		240 1
		82 5
		207 2
		249 5
		57 1
		62 1
		179 3
		264 4
		275 5
		141 3
		271 1
		97 4
		64 2
		216 4
		106 5
		110 2
		221 5
		53 4
		30 5
		157 2
		126 5
		144 1
		91 3
		215 1
		75 5
		139 5
		63 5
		186 5
		142 2
		129 5
		197 4
		34 3
		73 1
		14 1
		5 4
		230 2
		286 1
		288 4
		288 1
		232 3
		272 4
		290 3
		56 3
		264 4
		40 2
		213 1
		58 2
		12 2
		27 4
		168 3
		54 1
		40 2
		95 3
		89 2
		47 2
		105 3
		182 2
		208 5
		209 5
		16 1
		58 4
		225 3
		246 1
		47 5
		161 1
		215 2
		137 3
		279 5
		23 3
		240 1
		26 3
		235 3
		22 3
		219 4
		85 3
		6 4
		270 3
		229 3
		140 2
		23 3
		158 1
		114 5
		246 4
		52 1
		257 3
		61 3
		47 4
		230 1
		101 3
		47 1
		128 2
		64 2
		269 3
		50 5
		79 5
		112 3
		283 3
		11 2
		263 3
		264 2
		278 5
		58 5
		117 4
		27 5
		85 4
		146 4
		83 3
		96 1
		270 3
		82 3
		157 2
		57 1
		24 5
		240 4
		117 3
		271 5
		77 4
		2 1
		46 2
		185 5
		256 4
		176 1
		45 4
		122 2
		71 2
		110 3
		83 2
		136 5
		246 3
		71 1
		104 1
		209 1
		81 1
		200 5
		115 2
		140 2
		141 3
		226 3
		63 4
		32 2
		1 1
		128 3
		105 4
		269 4
		61 5
		252 5
		116 1
		177 5
		195 3
		74 5
		101 2
		133 4
		146 4
		199 4
		202 2
		195 4
		180 4
		176 5
		237 3
		258 2
		44 5
		148 1
		224 3
		186 2
		46 5
		256 5
		238 2
		42 5
		48 4
		282 1
		17 5
		228 1
		223 5
		89 5
		138 4
		256 5
		202 3
		114 5
		231 2
		282 4
		230 2
		262 4
		110 1
		74 2
		150 3
		131 5
		34 5
		279 3
		268 5
		243 2
		124 3
		177 3
		20 5
		103 5
		33 3
		87 1
		74 1
		214 5
		60 5
		272 5
		137 2
		244 5
		1 4
		61 1
		288 3
		274 1
		54 1
		142 3
		145 3
		186 2
		243 1
		204 2
		139 5
		48 2
		252 3
		286 5
		11 2
		86 4
		187 1
		240 1
		138 2
		274 3
		155 5
		251 5
		50 1
		236 5
		247 2
		16 1
		140 5
		109 4
		245 3
		202 4
		52 3
		145 2
		171 5
		201 4
		170 4
		30 5
		99 2
		248 5
		262 3
		79 4
		22 5
		150 3
		191 3
		117 2
		207 5
		19 5
		67 5
		194 5
		62 5
		150 4
		160 4
		30 5
		231 2
		77 3
		174 1
		282 2
		80 3
		289 5
		264 2
		192 1
		50 1
		49 1
		78 3
		99 3
		289 4
		155 2
		207 1
		162 2
		147 3
		202 3
		114 4
		123 2
		124 4
		205 3
		137 2
		110 1
		197 4
		34 2
		66 5
		152 4
		139 4
		236 2
		2 3
		108 4
		226 2
		99 1
		289 2
		86 4
		9 2
		234 5
		274 3
		36 4
		118 4
		156 3
		224 3
		242 1
		51 1
		56 1
		150 3
		30 4
		143 3
		94 1
		27 1
		127 4
		241 1
		94 4
		170 5
		75 5
		131 4
		105 3
		150 5
		275 5
		62 4
		168 3
		230 4
		162 2
		232 2
		253 5
		127 5
		178 5
		280 2
		138 4
		288 5
		209 4
		267 3
		255 4
		257 5
		3 1
		16 5
		281 2
		14 3
		89 3
		266 4
		56 1
		166 5
		245 3
		250 2
		101 5
		273 4
		79 3
		217 2
		12 4
		111 1
		130 5
		159 1
		192 1
		155 4
		107 3
		16 3
		134 4
		217 1
		155 2
		45 3
		256 3
		290 3
		149 3
		184 5
		73 2
		246 3
		245 5
		205 3
		87 3
		142 1
		245 1
		118 3
		146 3
		30 5
		45 1
		236 4
		230 3
		110 1
		188 4
		9 4
		164 5
		270 5
		11 3
		235 3
		142 5
		184 2
		6 5
		20 5
		33 5
		270 5
		224 3
		30 2
		83 2
		121 4
		75 1
		90 3
		261 1
		247 1
		223 1
		178 3
		132 3
		14 3
		284 2
		243 4
		72 2
		159 1
		14 3
		63 4
		206 1
		284 3
		283 3
		266 5
		184 3
		26 3
		18 2
		104 3
		221 2
		199 4
		61 1
		37 5
		120 5
		172 4
		246 3
		69 3
		82 3
		132 2
		127 3
		70 3
		186 5
		150 4
		252 2
		103 2
		42 4
		49 4
		56 4
		140 5
		7 1
		119 1
		262 2
		228 5
		57 5
		209 2
		252 2
		72 5
		7 2
		64 2
		191 5
		124 5
		158 5
		212 4
		202 1
		253 4
		130 4
		117 1
		212 4
		108 2
		57 1
		60 5
		248 5
		120 4
		204 5
		212 5
		138 2
		216 1
		5 2
		188 4
		141 2
		192 3
		239 1
		217 5
		18 1
		211 2
		262 4
		75 4
		59 2
		119 2
		157 4
		270 3
		136 5
		249 4
		234 5
		104 5
		266 2
		238 4
		249 5
		157 5
		274 2
		147 4
		142 3
		36 1
		151 4
		77 2
		39 1
		229 1
		104 4
		178 5
		24 2
		154 2
		267 1
		109 4
		203 3
		17 1
		52 4
		238 5
		228 5
		154 4
		227 1
		283 3
		27 2
		246 2
		106 5
		140 5
		268 4
		239 1
		107 2
		228 5
		125 2
		5 2
		95 4
		102 4
		89 1
		56 5
		135 2
		4 1
		172 3
		225 5
		119 5
		195 3
		106 5
		164 5
		286 1
		267 2
		249 2
		18 2
		0 5
		195 2
		182 1
		99 5
		200 5
		212 1
		123 1
		251 4
		84 3
		149 5
		65 5
		14 1
		233 2
		119 2
		110 2
		196 4
		78 2
		103 2
		9 3
		196 5
		197 5
		178 2
		67 2
		222 2
		116 2
		16 3
		18 1
		193 3
		59 4
		269 5
		177 4
		96 5
		101 4
		48 1
		128 1
		78 2
		21 3
		186 2
		253 2
		199 5
		60 3
		132 4
		271 4
		271 3
		263 5
		159 2
		255 4
		13 1
		130 5
		165 3
		237 4
		83 5
		15 2
		144 1
		194 1
		108 5
		1 5
		261 1
		167 1
		180 1
		246 2
		266 3
		146 1
		185 4
		24 2
		96 3
		276 5
		264 5
		267 4
		257 3
		139 4
		137 2
		174 5
		278 5
		58 4
		156 1
		33 1
		14 5
		117 5
		164 3
		45 3
		266 5
		66 3
		86 2
		227 3
		281 3
		192 4
		132 1
		259 4
		6 4
		222 1
		174 2
		30 5
		235 1
		34 2
		193 4
		86 1
		251 3
		276 3
		12 1
		268 5
		13 4
		278 5
		4 4
		75 5
		196 2
		201 1
		140 2
		24 3
		110 2
		87 2
		246 1
		105 1
		19 4
		24 5
		54 2
		100 2
		62 3
		263 5
		43 3
		52 5
		282 5
		127 4
		223 3
		68 5
		147 3
		58 4
		12 5
		190 4
		9 2
		278 4
		41 5
		201 2
		237 2
		186 4
		15 1
		169 3
		81 4
		202 4
		60 1
		281 2
		12 3
		278 5
		224 4
		137 1
		4 4
		261 3
		252 1
		174 3
		175 4
		67 3
		200 5
		218 5
		32 4
		228 3
		250 3
		231 5
		67 4
		287 4
		288 1
		266 3
		175 1
		189 5
		255 2
		202 4
		64 3
		262 4
		159 3
		16 4
		287 5
		71 2
		153 4
		206 4
		168 1
		113 2
		289 3
		163 4
		205 2
		130 3
		158 4
		242 5
		203 2
		9 5
		155 4
		103 5
		125 3
		259 1
		204 5
		150 5
		211 1
		137 3
		241 5
		233 2
		16 3
		265 2
		141 3
		255 2
		104 1
		156 3
		60 1
		84 3
		108 4
		282 2
		74 1
		153 2
		124 3
		146 4
		65 3
		153 5
		213 4
		100 1
		172 3
		38 5
		274 3
		230 4
		53 2
		206 3
		262 3
		276 1
		273 3
		216 5
		114 3
		194 1
		183 2
		280 5
		40 5
		112 4
		48 1
		130 2
		22 5
		191 3
		168 1
		282 5
		175 2
		183 3"
	);
}
