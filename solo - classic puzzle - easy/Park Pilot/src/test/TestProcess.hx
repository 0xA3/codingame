package test;

import Std.parseInt;

using StringTools;
using buddy.Should;

@:access(Main)
class TestProcess extends buddy.BuddySuite {
	
	public function new() {
		
		describe( "Test process", {
			it( "Test 1", {
				final ip = test1;
				Main.process( ip.n, ip.sensorDatasets ).should.be( test1Result );
			});
			
			it( "Test 2", {
				final ip = test2;
				Main.process( ip.n, ip.sensorDatasets ).should.be( test2Result );
			});

			it( "Test 3", {
				final ip = test3;
				Main.process( ip.n, ip.sensorDatasets ).should.be( test3Result );
			});

			it( "Test 4", {
				final ip = test4;
				Main.process( ip.n, ip.sensorDatasets ).should.be( test4Result );
			});

			it( "Test 5", {
				final ip = test5;
				Main.process( ip.n, ip.sensorDatasets ).should.be( test5Result );
			});

		});
			
	}


	static function parseInput( input:String ) {
		final lines = input.replace( "\t", "" ).replace( "\r", "" ).split( "\n" );
		final n = parseInt( lines[0] );
		final sensorDatasets = lines.slice( 1 ).map( line -> line.split("").map( s -> parseInt( s )));
		
		return { n: n, sensorDatasets: sensorDatasets }
	}
	
	static function parseResult( input:String ) {
		return input.replace( "\t", "" ).replace( "\r", "" );
	}

	final test1 = parseInput(
		"31
		1111
		1111
		1111
		1111
		1111
		1111
		0111
		1111
		1111
		1111
		1110
		1011
		0011
		0011
		0011
		0101
		0100
		1100
		1100
		1010
		1010
		1011
		0011
		0001
		0001
		0101
		1100
		1100
		1100
		1110
		1011" );
	
	final test1Result = parseResult(
		"5
		20L
		27R
		28R" );
	
	final test2 = parseInput(
		"74
		1111
		1111
		1111
		1111
		0111
		1111
		1111
		1111
		1111
		1011
		0010
		0011
		0111
		0111
		1111
		1101
		1100
		1000
		1010
		0010
		0011
		0111
		0111
		0001
		0001
		1000
		1100
		1110
		1110
		1100
		0100
		0001
		0011
		0011
		0011
		0011
		1010
		1100
		1100
		1000
		1000
		0000
		0001
		1011
		1011
		0001
		0001
		0100
		0100
		0101
		1101
		1100
		1000
		1010
		1010
		0010
		0011
		0011
		0101
		0101
		0101
		0100
		1100
		1000
		1010
		1010
		1010
		0010
		0011
		0101
		0101
		0101
		0101
		0100" );
	
	final test2Result = parseResult(
		"7
		51R
		52R
		67L
		79L" );
		
	final test3 = parseInput(
		"74
		1111
		1111
		1111
		1111
		0111
		1111
		1111
		1111
		1111
		1011
		0010
		0011
		0011
		0111
		0111
		1101
		1100
		1100
		1000
		1010
		0010
		0011
		0011
		0011
		0001
		0101
		1100
		1100
		1100
		1100
		1000
		0010
		0011
		0011
		0111
		0111
		0001
		0000
		0100
		1100
		1110
		1110
		1100
		1000
		0010
		0011
		0011
		1011
		1011
		0101
		1100
		1100
		1100
		1101
		1001
		0010
		0011
		0011
		0111
		1111
		1101
		0100
		0100
		0000
		0010
		0011
		0011
		0010
		1010
		1100
		1100
		1100
		1100
		0100" );
	
	final test3Result = parseResult(
		"7
		30R
		43L
		44L
		73L" );
		
	final test4 = parseInput(
		"155
		1111
		1111
		1111
		1111
		0111
		1111
		1111
		1111
		1111
		1011
		0010
		0011
		0011
		0011
		1111
		1101
		1100
		1100
		1100
		0000
		0011
		0011
		0011
		0011
		0011
		1100
		1100
		1100
		1100
		1100
		0000
		0011
		0011
		0011
		1111
		1111
		1000
		1000
		1000
		0100
		0111
		0111
		0101
		1101
		1001
		0010
		0010
		0010
		0010
		0111
		1101
		1100
		1100
		1100
		1000
		0010
		0011
		0011
		0111
		0111
		1101
		1100
		1100
		1000
		1010
		0010
		0011
		0011
		0011
		1101
		1101
		1100
		1100
		1100
		0000
		0011
		0011
		0011
		0011
		1111
		1100
		1100
		1100
		1100
		0000
		0011
		0011
		1011
		1011
		1111
		1100
		1100
		0100
		0101
		0001
		0011
		0011
		0111
		1110
		1010
		1000
		1000
		1000
		0110
		0111
		0101
		0101
		0101
		1001
		1010
		1010
		1010
		1010
		0110
		0101
		0101
		0101
		0101
		0001
		1010
		1010
		1010
		1010
		1010
		0100
		0101
		0101
		0101
		0101
		1001
		1010
		1010
		1010
		1010
		0110
		0101
		0101
		0101
		0101
		0001
		1010
		1010
		1010
		1010
		1010
		0000
		0101
		0101
		0101
		0101
		1101
		1000
		1010
		1010
		1010" );
	
	final test4Result = parseResult(
		"7
		151R" );
		
	final test5 = parseInput(
		"153
		1111
		1111
		0111
		1111
		1111
		1111
		1111
		1011
		0011
		0011
		0010
		0011
		1111
		1111
		1111
		1101
		1100
		0000
		0000
		0000
		0011
		0011
		0011
		0011
		1011
		1000
		1100
		1100
		1100
		0100
		0100
		0000
		1101
		1101
		1011
		1011
		1011
		0110
		0110
		0100
		0111
		1111
		1001
		0001
		0001
		0010
		0010
		0110
		0110
		0111
		0101
		0100
		0000
		0000
		0000
		1010
		1110
		0110
		1110
		1110
		1100
		1000
		1000
		0001
		0011
		0010
		0011
		1111
		1111
		1101
		1101
		1100
		0000
		0000
		0000
		0011
		0111
		1111
		1011
		1011
		1000
		1000
		0000
		0000
		0010
		1011
		1001
		1101
		1101
		1101
		0100
		0100
		0000
		0001
		0001
		0011
		1011
		1011
		1010
		1010
		1000
		0100
		0100
		0100
		0101
		0101
		1001
		1001
		1001
		1010
		1010
		0110
		0110
		0110
		0101
		0101
		0001
		0001
		0001
		0010
		1010
		1010
		1110
		1110
		1100
		0100
		0100
		1000
		1001
		1001
		1111
		1111
		0111
		0110
		0110
		0001
		0001
		0001
		1011
		1011
		1010
		1010
		1010
		0000
		0100
		0100
		0101
		0101
		1101
		1001
		1001
		1000
		1010" );
	
	final test5Result = parseResult(
		"9
		33R
		59L
		60L
		61L
		62L
		94R
		108R
		127L
		151R" );
}

